import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from config import BOT_TOKEN, ADMIN_ID
import database
import scheduler

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    text = (
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/addword [—Å–ª–æ–≤–æ] - –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–æ\n"
        "/addurl [url] - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "/removeword [id] - —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–æ\n"
        "/removeurl [id] - —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "/words - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–æ–ø-—Å–ª–æ–≤\n"
        "/urls - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
    )
    await message.answer(text)

@dp.message_handler(commands=['addword'])
async def add_stop_word(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    word = message.get_args()
    if word:
        database.add_stop_word(word)
        await message.answer(f"‚úÖ –°—Ç–æ–ø-—Å–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.message_handler(commands=['addurl'])
async def add_source(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    url = message.get_args()
    if url:
        database.add_source(url)
        await message.answer(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ '{url}' –¥–æ–±–∞–≤–ª–µ–Ω")

@dp.message_handler(commands=['removeword'])
async def remove_word(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        word_id = int(message.get_args())
        database.remove_stop_word(word_id)
        await message.answer(f"‚úÖ –°—Ç–æ–ø-—Å–ª–æ–≤–æ —Å ID {word_id} —É–¥–∞–ª–µ–Ω–æ")
    except:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ª–æ–≤–∞")

@dp.message_handler(commands=['removeurl'])
async def remove_url(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        url_id = int(message.get_args())
        database.remove_source(url_id)
        await message.answer(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —Å ID {url_id} —É–¥–∞–ª–µ–Ω")
    except:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

@dp.message_handler(commands=['words'])
async def list_words(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    words = database.get_all_stop_words()
    if not words:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –ø—É—Å—Ç")
        return
    
    response = "üìù –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤:\n" + "\n".join(
        [f"{word[0]}. {word[1]}" for word in words]
    )
    await message.answer(response)

@dp.message_handler(commands=['urls'])
async def list_urls(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    urls = database.get_all_sources()
    if not urls:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç")
        return
    
    response = "üåê –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n" + "\n".join(
        [f"{url[0]}. {url[1]}" for url in urls]
    )
    await message.answer(response)

@dp.message_handler(commands=['add_stop_word'])
async def add_stop_word(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    word = message.get_args()
    if word:
        database.add_stop_word(word)
        await message.answer(f"–°—Ç–æ–ø-—Å–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.message_handler(commands=['add_source'])
async def add_source(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    url = message.get_args()
    if url:
        database.add_source(url)
        await message.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{url}' –¥–æ–±–∞–≤–ª–µ–Ω")

if __name__ == '__main__':
    scheduler.setup_scheduler(bot)
    executor.start_polling(dp, skip_updates=True)